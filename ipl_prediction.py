# -*- coding: utf-8 -*-
"""IPL prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1afppTlFgxBxhUiWEnFxkZPuyJyFfLuaL
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

matches=pd.read_csv('matches.csv')
deliveries=pd.read_csv('deliveries.csv')

matches.head()

deliveries.head()

print(deliveries['batting_team'].unique())

print(matches['team1'].unique())

matches['city'].unique()

# We need information like what is the batting team, bowling Team, Venue of the match,
 # wickets left, runs left, balls left, first innings total runs made, current run rate,
 # required run rate, The result of the match

matches.shape

deliveries.shape

# we will create a data frame which shows the matches and the score of both the innings
ipl_score_df = deliveries.groupby(['match_id','inning']).sum()['total_runs'].reset_index()

ipl_score_df

# now we need only the total of 1st innigs so that we can predict the scores of
# second innings

ipl_score_df= ipl_score_df[ipl_score_df['inning'] == 1]

ipl_score_df

# Now we will merge the matches and deliveries csv

ipl_matches_df = matches.merge(ipl_score_df[['match_id','total_runs']],left_on='id',right_on='match_id')

ipl_matches_df

ipl_matches_df.shape

# Now we have merged the ipl_matches and ipl_deliveries csv

# now we will merge the names of ipl teams which has changed thier names over the years
# to avoid confusion, ONLY DECCAN CHARGERS AND DELHI DAREDEVILS HAVE CHANGED THEIR NAMES

ipl_matches_df

# now lets delete the matches which are effected by rain

ipl_matches_df['dl_applied'].value_counts()

ipl_matches_df=ipl_matches_df[ipl_matches_df['dl_applied']==0]

ipl_matches_df

ipl_matches_df=ipl_matches_df[['match_id','city','winner','total_runs']]

# Now we will combine the extracted columns to the delivery dataframe

delivery_df=ipl_matches_df.merge(deliveries,on='match_id')

delivery_df = delivery_df[delivery_df['inning'] == 2]

delivery_df.shape

delivery_df

# Now we will caluculate the total runs

delivery_df['Current_Score'] = delivery_df.groupby('match_id').cumsum()['total_runs_y']

delivery_df['Runs_Left'] = delivery_df['total_runs_x'] - delivery_df['Current_Score'] + 1
# the target is +1 of the current score

delivery_df

delivery_df['Balls_Left'] = 126 - (delivery_df['over']*6 + delivery_df['ball'])

delivery_df

# now we have to create a coloumn wickets left
# for that lets fill player dismissed column NAN into the 0
# and where ever there is a one in the coloumn it is counted as out/wicket

delivery_df['player_dismissed'] = delivery_df['player_dismissed'].fillna("0")
delivery_df['player_dismissed'] = delivery_df['player_dismissed'].apply(lambda x:x if x == "0" else "1")
delivery_df['player_dismissed'] = delivery_df['player_dismissed'].astype('int')
wickets = delivery_df.groupby('match_id').cumsum()['player_dismissed'].values
delivery_df['wickets'] = 10 - wickets

delivery_df

# current run rate crr= runs/overs

delivery_df['CRR'] = (delivery_df['Current_Score']*6)/(120 - delivery_df['Balls_Left'])

delivery_df

# for required runrate
# rrr = target-runs scored/overs or balls remaining

delivery_df['RRR'] = (delivery_df['Runs_Left']*6)/delivery_df['Balls_Left']

delivery_df

# for result row
def result(row):
    return 1 if row['batting_team'] == row['winner'] else 0

delivery_df['Result'] = delivery_df.apply(result,axis=1)

delivery_df

# filter the dataframe to include only the winning matches
winning_matches = delivery_df[delivery_df['winner'] == delivery_df['batting_team']]

# get average CRR for each team at the time of winning
average_crr_winning = winning_matches.groupby('batting_team')['CRR'].mean()

plt.figure(figsize=(10, 6))
sns.barplot(x=average_crr_winning.index, y=average_crr_winning.values, palette='bright')
plt.title("Average CRR of Teams at the Time of Winning")
plt.xlabel("Team")
plt.ylabel("Average CRR")
plt.xticks(rotation=90)  # Rotate x-axis labels for better visibility if team names are long

plt.show()

delivery_df.info()

delivery_df.nunique()

from seaborn import heatmap
heatmap(data=delivery_df.corr(), annot=True)
# Access the axis object
ax = plt.gca()
# Set the font size of the column and row labels
ax.tick_params(axis='both', which='major', labelsize=13)
# Set the font size for the annotation values
ax.tick_params(axis='both', which='minor', labelsize=13)
plt.subplots_adjust(bottom=0.2, left=0.2)
fig = ax.get_figure()
fig.set_size_inches(25, 22)
plt.show()

ipl_df = delivery_df[['batting_team','bowling_team','city','Runs_Left','Balls_Left','wickets','total_runs_x','CRR','RRR','Result']]

ipl_df

teams = [
    'Chennai Super Kings',
    'Kolkata Knight Riders',
    'Delhi Capitals',
    'Rajasthan Royals',
    'Kings XI Punjab',
    'Sunrisers Hyderabad',
    'Mumbai Indians',
    'Royal Challengers Bangalore'
]

ipl_df['batting_team']=ipl_df['batting_team'].str.replace('Delhi Daredevils', 'Delhi Capitals')
ipl_matches_df['bowling_team']=ipl_df['bowling_team'].str.replace('Delhi Daredevils', 'Delhi Capitals')

ipl_df['batting_team']=ipl_df['batting_team'].str.replace('Deccan Chargers', 'Sunrisers Hyderabad')
ipl_df['bowling_team']=ipl_df['bowling_team'].str.replace('Deccan Chargers', 'Sunrisers Hyderabad')

ipl_df.shape

ipl_df = ipl_df[ipl_df['batting_team'].isin(teams)]
ipl_df = ipl_df[ipl_df['bowling_team'].isin(teams)]

ipl_matches_df.shape

ipl_df

winner_counts = delivery_df['winner'].value_counts()
plt.figure(figsize=(15, 5))
sns.barplot(x=winner_counts.index, y=winner_counts.values, palette='bright')
plt.title("Number of Wins per Team")
plt.xlabel("Team")
plt.ylabel("Number of Wins")
plt.xticks(rotation=90)

plt.show()

match_counts = delivery_df['city'].value_counts()

plt.figure(figsize=(15, 5))
sns.barplot(x=match_counts.index, y=match_counts.values, palette='bright')

plt.title("Number of Matches Played in Each City")
plt.xlabel("City")
plt.ylabel("Number of Matches")
plt.xticks(rotation=90)

plt.show()

ipl_df.info()

ipl_df.nunique()

ipl_df['batting_team'].unique()
ipl_df['bowling_team'].unique()

ipl_df['city'].unique()

matches['city'].unique()

# shuffling the data set because if not shuffled the model may dovelope biased results
ipl_df = ipl_df.sample(ipl_df.shape[0])

ipl_df.sample()

from seaborn import heatmap
heatmap(data=ipl_df.corr(), annot=True)

"""model building

I HAVE TO CLEAR THIS MESS UNTIL 20.07.2023
"""

ipl_df.dropna(inplace=True)

ipl_df=ipl_df[ipl_df['Balls_Left'] != 0]

X = ipl_df.iloc[:,:-1]
y = ipl_df.iloc[:,-1]
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1)

print(f"Total dataset size: {len(X)}")
print(f"Training set size: {len(X_train)} ({len(X_train)/len(X)*100}% of total data)")
print(f"Test set size: {len(X_test)} ({len(X_test)/len(X)*100}% of total data)")
# Calculate and print the proportion of split
train_split = len(X_train) / len(X) * 100
test_split = len(X_test) / len(X) * 100

print(f"Data split: {train_split}% train, {test_split}% test")

X_train

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import accuracy_score
from sklearn.pipeline import Pipeline

# Define a ColumnTransformer
Transformer = ColumnTransformer(
    [
        # Each tuple in this list defines a name, a transformer, and the columns to be transformed
        ('one_hot_encoder',  # Name of the transformer
         OneHotEncoder(sparse=False, drop='first'),  # The transformer
         ['batting_team', 'bowling_team', 'city']  # The columns to be applied on
        )
    ],
    remainder='passthrough'  # The remaining columns (not specified) will be left as they are
)

"""LOGISTIC REGRESSION"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, roc_auc_score, roc_curve
# For Logestic Regression
pipe_LOG = Pipeline(steps=[
    ('preprocessing', Transformer),  # Preprocessing step
    ('model', LogisticRegression(solver='liblinear'))  # Machine learning model
])

# Fit the pipeline to the training data
pipe_LOG.fit(X_train, y_train)

# Use the pipeline to make predictions on the training and test data
y_train_pred = pipe_LOG.predict(X_train)
y_test_pred = pipe_LOG.predict(X_test)
# ASK PROF THAT SHALL I USE YPRED WITH DIFF NAMES FOR DIFF ALGO

# Print model scores on the training and test set
train_score = pipe_LOG.score(X_train, y_train)
test_score = pipe_LOG.score(X_test, y_test)
print(f"Training Score: {train_score * 100}%")
print(f"Test Score: {test_score * 100}%")

# Print accuracy scores
print(f"Training Accuracy: {accuracy_score(y_train, y_train_pred) * 100}%")
print(f"Test Accuracy: {accuracy_score(y_test, y_test_pred) * 100}%")

from sklearn.metrics import precision_score

# Get precision on training set
precision_train = precision_score(y_train, y_train_pred)
print("Training Precision: ", precision_train)

# Get precision on test set
precision_test = precision_score(y_test, y_test_pred)
print("Test Precision: ", precision_test)

# Use the pipeline to predict probabilities on the test data
y_pred_prob = pipe_LOG.predict_proba(X_test)[2]
y_pred_prob

from sklearn.model_selection import learning_curve
import numpy as np
import matplotlib.pyplot as plt

def plot_learning_curve(estimator, X, y, cv=None, n_jobs=1, train_sizes=np.linspace(.1, 1.0, 5)):
    model_name = estimator.named_steps['model'].__class__.__name__

    plt.figure()
    plt.title(f"Learning curve for {model_name}")
    plt.xlabel("Training examples")
    plt.ylabel("Score")

    train_sizes, train_scores, test_scores = learning_curve(
        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)

    train_scores_mean = np.mean(train_scores, axis=1)
    train_scores_std = np.std(train_scores, axis=1)
    test_scores_mean = np.mean(test_scores, axis=1)
    test_scores_std = np.std(test_scores, axis=1)

    plt.grid()

    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,
                     train_scores_mean + train_scores_std, alpha=0.1,
                     color="r")
    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,
                     test_scores_mean + test_scores_std, alpha=0.1, color="g")
    plt.plot(train_sizes, train_scores_mean, 'o-', color="r",
             label="Training score")
    plt.plot(train_sizes, test_scores_mean, 'o-', color="g",
             label="Cross-validation score")

    plt.legend(loc="best")
    return plt

plot_learning_curve(pipe_LOG, X_train, y_train, cv=5)
plt.show()

teams = ['Sunrisers Hyderabad',
 'Mumbai Indians',
 'Royal Challengers Bangalore',
 'Kolkata Knight Riders',
 'Kings XI Punjab',
 'Chennai Super Kings',
 'Rajasthan Royals',
 'Delhi Capitals']

cities = ['Hyderabad', 'Bangalore', 'Mumbai', 'Indore', 'Kolkata',
       'Chandigarh', 'Delhi', 'Jaipur', 'Chennai', 'Cape Town',
       'Port Elizabeth', 'Durban', 'Centurion', 'East London',
       'Johannesburg', 'Kimberley', 'Ahmedabad', 'Cuttack', 'Nagpur',
       'Dharamsala', 'Visakhapatnam', 'Pune', 'Raipur', 'Ranchi',
       'Abu Dhabi', 'Sharjah', 'Bengaluru', 'Mohali']

# Function to get user input
def get_user_input(teams, cities):
    print("Available Teams: ", ', '.join(sorted(teams)))
    print("Available Cities: ", ', '.join(sorted(cities)))

    while True:
        batting_team = input("Enter batting team: ")
        if batting_team in teams:
            break
        else:
            print("Invalid team. The team you entered is not in the available teams. Please try again.")

    while True:
        bowling_team = input("Enter bowling team: ")
        if bowling_team in teams and bowling_team != batting_team:
            break
        else:
            print("Invalid team or same as batting team. The team you entered is not in the available teams or same as the batting team. Please try again.")

    while True:
        city = input("Enter host city: ")
        if city in cities:
            break
        else:
            print("Invalid city. The city you entered is not in the available cities. Please try again.")

    return batting_team, bowling_team, city

# Get user input

batting_team, bowling_team, city = get_user_input(teams, cities)

# Print the teams and city
print(f"\nBatting team: {batting_team}\nBowling team: {bowling_team}\nHost city: {city}")

# For overs and wickets input

# Function to get user input
def get_match_input():
    while True:
        try:
            score_till_now = int(input("Enter score till now: "))
            if score_till_now >= 0:
                break
            else:
                print("Invalid input. Score cannot be negative. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    while True:
        try:
            overs_till_now = float(input("Enter overs completed till now: "))
            if 0 <= overs_till_now <= 20:
                break
            else:
                print("Invalid input. Overs should be between 0 and 20. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    while True:
        try:
            wickets_till_now = int(input("Enter wickets lost till now: "))
            if 0 <= wickets_till_now <= 10:
                break
            else:
                print("Invalid input. Wickets should be between 0 and 10. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    while True:
        try:
            target = int(input("Enter target: "))
            if target >= 0:
                break
            else:
                print("Invalid input. Target cannot be negative. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    return score_till_now, overs_till_now, wickets_till_now, target

# Get match input
score_till_now, overs_till_now, wickets_till_now, target = get_match_input()

# Print the score, overs, wickets and target
print(f"\nScore till now: {score_till_now}\nOvers completed till now: {overs_till_now}\nWickets lost till now: {wickets_till_now}\nTarget: {target}")

# Calculate match statistics
Runs_Left = target - score_till_now
Balls_Left = 120 - (overs_till_now*6)
remaining_wickets = 10 - wickets_till_now
if overs_till_now == 0:
    CRR = 0
else:
    CRR = score_till_now/overs_till_now
if Balls_Left == 0:
    RRR = 0
else:
    RRR = (Runs_Left*6)/Balls_Left

# Create dataframe
input_df = pd.DataFrame({
    'batting_team': [batting_team],
    'bowling_team': [bowling_team],
    'city': [city],
    'Runs_Left': [Runs_Left],
    'Balls_Left': [Balls_Left],
    'wickets': [remaining_wickets],
    'total_runs_x': [target],
    'CRR': [CRR],
    'RRR': [RRR]
})

print(input_df)

# Assuming that 'pipe' is a trained pipeline
result = pipe_LOG.predict_proba(input_df)
loss = result[0][0]
win = result[0][1]

print(f"{batting_team} - {round(win*100)}%")
print(f"{bowling_team} - {round(loss*100)}%")

model_name = pipe_LOG.named_steps['model'].__class__.__name__
print(f"\nModel: {model_name}\n")

# this one is sending one of the previous matches into the pipe
def match_summary(row):
    print("Batting Team-" + row['batting_team'] + " | Bowling Team-" + row['bowling_team'] + " | Target- " + str(row['total_runs_x']))

ipl_df

def match_progression(x_df,match_id,pipe):
    match = x_df[x_df['match_id'] == match_id]
    match = match[(match['ball'] == 6)]
    temp_df = match[['batting_team','bowling_team','city','Runs_Left','Balls_Left','wickets','total_runs_x','CRR','RRR']].dropna()
    temp_df = temp_df[temp_df['Balls_Left'] != 0]
    result = pipe.predict_proba(temp_df)
    temp_df['lose'] = np.round(result.T[0]*100,1)
    temp_df['win'] = np.round(result.T[1]*100,1)
    temp_df['end_of_over'] = range(1,temp_df.shape[0]+1)

    target = temp_df['total_runs_x'].values[0]
    runs = list(temp_df['Runs_Left'].values)
    new_runs = runs[:]
    runs.insert(0,target)
    temp_df['runs_after_over'] = np.array(runs)[:-1] - np.array(new_runs)
    wickets = list(temp_df['wickets'].values)
    new_wickets = wickets[:]
    new_wickets.insert(0,10)
    wickets.append(0)
    w = np.array(wickets)
    nw = np.array(new_wickets)
    temp_df['wickets_in_over'] = (nw - w)[0:temp_df.shape[0]]

    print("Target-",target)
    temp_df = temp_df[['end_of_over','runs_after_over','wickets_in_over','lose','win']]
    return temp_df,target

temp_df,target = match_progression(delivery_df,1,pipe_LOG)
temp_df

import matplotlib.pyplot as plt
plt.figure(figsize=(18,8))
plt.plot(temp_df['end_of_over'],temp_df['wickets_in_over'],color='yellow',linewidth=3)
plt.plot(temp_df['end_of_over'],temp_df['win'],color='#00a65a',linewidth=4)
plt.plot(temp_df['end_of_over'],temp_df['lose'],color='red',linewidth=4)
plt.bar(temp_df['end_of_over'],temp_df['runs_after_over'])
plt.title('Target-' + str(target))

"""RANDOM FOREST REGRESSOR

"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
from sklearn.metrics import r2_score, mean_squared_error
# for random forest
pipe_RF = Pipeline(steps=[
    ('preprocessing', Transformer),  # Preprocessing step
    ('model', RandomForestRegressor(n_estimators=100, random_state=0))  # Machine learning model
])

# Fit the pipeline to the training data
pipe_RF.fit(X_train, y_train)

# Use the pipeline to make predictions on the test data
y_train_pred = pipe_RF.predict(X_train)
y_test_pred = pipe_RF.predict(X_test)

# Print model scores on the training and test set
train_score = pipe_RF.score(X_train, y_train)
test_score = pipe_RF.score(X_test, y_test)
print(f"Training Score: {train_score * 100}%")
print(f"Test Score: {test_score * 100}%")

print(f"Training R2 Score: {r2_score(y_train, y_train_pred)}")
print(f"Test R2 Score: {r2_score(y_test, y_test_pred)}")

# Calculate and print RMSE for the training set
train_mse = (mean_squared_error(y_train, y_train_pred))
print(f"Training MSE: {train_mse}")

# Calculate and print RMSE for the test set
test_mse = (mean_squared_error(y_test, y_test_pred))
print(f"Test MSE: {test_mse}%")

# Calculate and print RMSE for the training set
train_rmse = np.sqrt(mean_squared_error(y_train, y_train_pred))
print(f"Training RMSE: {train_rmse}")


# Test score
test_rmse = np.sqrt(mean_squared_error(y_test, y_pred))
test_score = pipe_RF.score(X_test, y_test)
print(f"Test RMSE: {test_rmse}")

plot_learning_curve(pipe_RF, X_train, y_train, cv=5)
plt.show()

# Function to get user input
def get_user_input(teams, cities):
    print("Available Teams: ", ', '.join(sorted(teams)))
    print("Available Cities: ", ', '.join(sorted(cities)))

    while True:
        batting_team = input("Enter batting team: ")
        if batting_team in teams:
            break
        else:
            print("Invalid team. The team you entered is not in the available teams. Please try again.")

    while True:
        bowling_team = input("Enter bowling team: ")
        if bowling_team in teams and bowling_team != batting_team:
            break
        else:
            print("Invalid team or same as batting team. The team you entered is not in the available teams or same as the batting team. Please try again.")

    while True:
        city = input("Enter host city: ")
        if city in cities:
            break
        else:
            print("Invalid city. The city you entered is not in the available cities. Please try again.")

    return batting_team, bowling_team, city

# Get user input

batting_team, bowling_team, city = get_user_input(teams, cities)

# Print the teams and city
print(f"\nBatting team: {batting_team}\nBowling team: {bowling_team}\nHost city: {city}")

# For overs and wickets input

# Function to get user input
def get_match_input():
    while True:
        try:
            score_till_now = int(input("Enter score till now: "))
            if score_till_now >= 0:
                break
            else:
                print("Invalid input. Score cannot be negative. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    while True:
        try:
            overs_till_now = float(input("Enter overs completed till now: "))
            if 0 <= overs_till_now <= 20:
                break
            else:
                print("Invalid input. Overs should be between 0 and 20. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    while True:
        try:
            wickets_till_now = int(input("Enter wickets lost till now: "))
            if 0 <= wickets_till_now <= 10:
                break
            else:
                print("Invalid input. Wickets should be between 0 and 10. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    while True:
        try:
            target = int(input("Enter target: "))
            if target >= 0:
                break
            else:
                print("Invalid input. Target cannot be negative. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    return score_till_now, overs_till_now, wickets_till_now, target

# Get match input
score_till_now, overs_till_now, wickets_till_now, target = get_match_input()

# Print the score, overs, wickets and target
print(f"\nScore till now: {score_till_now}\nOvers completed till now: {overs_till_now}\nWickets lost till now: {wickets_till_now}\nTarget: {target}")

# Calculate match statistics
Runs_Left = target - score_till_now
Balls_Left = 120 - (overs_till_now*6)
remaining_wickets = 10 - wickets_till_now
if overs_till_now == 0:
    CRR = 0
else:
    CRR = score_till_now/overs_till_now
if Balls_Left == 0:
    RRR = 0
else:
    RRR = (Runs_Left*6)/Balls_Left

# Create dataframe
input_df = pd.DataFrame({
    'batting_team': [batting_team],
    'bowling_team': [bowling_team],
    'city': [city],
    'Runs_Left': [Runs_Left],
    'Balls_Left': [Balls_Left],
    'wickets': [remaining_wickets],
    'total_runs_x': [target],
    'CRR': [CRR],
    'RRR': [RRR]
})

print(input_df)

# 'input_df' is in input DataFrame
result = pipe_RF.predict(input_df)

# 'result' is a probability estimate of the 'batting_team' winning.
# This part would depend on how you've structured your labels in the training data.
win_probability = result[0]

print(f"Probability of {batting_team} winning: {round(win_probability * 100)}%")
print(f"Probability of {bowling_team} winning: {round((1 - win_probability) * 100)}%")

model_name = pipe_RF.named_steps['model'].__class__.__name__
print(f"\nModel: {model_name}\n")

"""DECISION TREE REGRESSOR


---



"""

from sklearn.tree import DecisionTreeRegressor

# For Decision Tree Classifier
pipe_DT = Pipeline(steps=[
    ('preprocessing', Transformer),  # Preprocessing step
    ('model', DecisionTreeRegressor())  # Machine learning model
])

# Fit the pipeline to the training data
pipe_DT.fit(X_train, y_train)

# Fit the pipeline to the training data
pipe_DT.fit(X_train, y_train)

'''# Use the pipeline to make predictions on the test data
y_pred = pipe_DT.predict(X_test)'''

# Using the pipeline to make predictions on the training and test data
y_train_pred = pipe_DT.predict(X_train)
y_test_pred = pipe_DT.predict(X_test)

# Print model scores on the training and test set
train_score = pipe_DT.score(X_train, y_train)
test_score = pipe_DT.score(X_test, y_test)
print(f"Training Score: {train_score * 100}%")
print(f"Test Score: {test_score * 100}%")

# Print R2 scores
print(f"Training R2 Score: {r2_score(y_train, y_train_pred)}")
print(f"Test R2 Score: {r2_score(y_test, y_test_pred)}")

from sklearn.metrics import mean_squared_error

# Calculate and print RMSE for the training set
train_rmse = np.sqrt(mean_squared_error(y_train, y_train_pred))
print(f"Training RMSE: {train_rmse}")

# Calculate and print RMSE for the test set
test_rmse = np.sqrt(mean_squared_error(y_test, y_test_pred))
print(f"Test RMSE: {test_rmse}")

plot_learning_curve(pipe_DT, X_train, y_train, cv=5)
plt.show()

# Function to get user input
def get_user_input(teams, cities):
    print("Available Teams: ", ', '.join(sorted(teams)))
    print("Available Cities: ", ', '.join(sorted(cities)))

    while True:
        batting_team = input("Enter batting team: ")
        if batting_team in teams:
            break
        else:
            print("Invalid team. The team you entered is not in the available teams. Please try again.")

    while True:
        bowling_team = input("Enter bowling team: ")
        if bowling_team in teams and bowling_team != batting_team:
            break
        else:
            print("Invalid team or same as batting team. The team you entered is not in the available teams or same as the batting team. Please try again.")

    while True:
        city = input("Enter host city: ")
        if city in cities:
            break
        else:
            print("Invalid city. The city you entered is not in the available cities. Please try again.")

    return batting_team, bowling_team, city

# Get user input

batting_team, bowling_team, city = get_user_input(teams, cities)

# Print the teams and city
print(f"\nBatting team: {batting_team}\nBowling team: {bowling_team}\nHost city: {city}")

# Function to get user input
def get_match_input():
    while True:
        try:
            score_till_now = int(input("Enter score till now: "))
            if score_till_now >= 0:
                break
            else:
                print("Invalid input. Score cannot be negative. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    while True:
        try:
            overs_till_now = float(input("Enter overs completed till now: "))
            if 0 <= overs_till_now <= 20:
                break
            else:
                print("Invalid input. Overs should be between 0 and 20. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    while True:
        try:
            wickets_till_now = int(input("Enter wickets lost till now: "))
            if 0 <= wickets_till_now <= 10:
                break
            else:
                print("Invalid input. Wickets should be between 0 and 10. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    while True:
        try:
            target = int(input("Enter target: "))
            if target >= 0:
                break
            else:
                print("Invalid input. Target cannot be negative. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    return score_till_now, overs_till_now, wickets_till_now, target

# Get match input
score_till_now, overs_till_now, wickets_till_now, target = get_match_input()

# Print the score, overs, wickets and target
print(f"\nScore till now: {score_till_now}\nOvers completed till now: {overs_till_now}\nWickets lost till now: {wickets_till_now}\nTarget: {target}")

# Calculate match statistics
Runs_Left = target - score_till_now
Balls_Left = 120 - (overs_till_now*6)
remaining_wickets = 10 - wickets_till_now
if overs_till_now == 0:
    CRR = 0
else:
    CRR = score_till_now/overs_till_now
if Balls_Left == 0:
    RRR = 0
else:
    RRR = (Runs_Left*6)/Balls_Left

# Create dataframe
input_df = pd.DataFrame({
    'batting_team': [batting_team],
    'bowling_team': [bowling_team],
    'city': [city],
    'Runs_Left': [Runs_Left],
    'Balls_Left': [Balls_Left],
    'wickets': [remaining_wickets],
    'total_runs_x': [target],
    'CRR': [CRR],
    'RRR': [RRR]
})

print(input_df)

result = pipe_DT.predict(input_df)

win_probability = result[0]

print(f"Probability of {batting_team} winning: {round(win_probability * 100)}%")
print(f"Probability of {bowling_team} winning: {round((1 - win_probability) * 100)}%")

model_name = pipe_DT.named_steps['model'].__class__.__name__
print(f"\nModel: {model_name}\n")

"""XGBOOST REGRESSOR"""

import xgboost as xgb

# for XGBoost Regressor
pipe_XGB= Pipeline(steps=[
    ('preprocessing', Transformer),  # Preprocessing step
    ('model', xgb.XGBRegressor(objective ='reg:squarederror'))  # Machine learning model
])

# Fit the pipeline to the training data
pipe_XGB.fit(X_train, y_train)

# Use the pipeline to make predictions on the training and test data
y_train_pred = pipe_XGB.predict(X_train)
y_test_pred = pipe_XGB.predict(X_test)

# Print model scores on the training and test set
train_score = pipe_XGB.score(X_train, y_train)
test_score = pipe_XGB.score(X_test, y_test)
print(f"Training Score: {train_score * 100}%")
print(f"Test Score: {test_score * 100}%")

# Print R2 scores
print(f"Training R2 Score: {r2_score(y_train, y_train_pred)}")
print(f"Test R2 Score: {r2_score(y_test, y_test_pred)}")

from sklearn.metrics import mean_squared_error

# Calculate and print RMSE for the training set
train_rmse = np.sqrt(mean_squared_error(y_train, y_train_pred))
print(f"Training RMSE: {train_rmse}")

# Calculate and print RMSE for the test set
test_rmse = np.sqrt(mean_squared_error(y_test, y_test_pred))
print(f"Test RMSE: {test_rmse}")

plot_learning_curve(pipe_XGB, X_train, y_train, cv=5)
plt.show()

# Function to get user input
def get_user_input(teams, cities):
    print("Available Teams: ", ', '.join(sorted(teams)))
    print("Available Cities: ", ', '.join(sorted(cities)))

    while True:
        batting_team = input("Enter batting team: ")
        if batting_team in teams:
            break
        else:
            print("Invalid team. The team you entered is not in the available teams. Please try again.")

    while True:
        bowling_team = input("Enter bowling team: ")
        if bowling_team in teams and bowling_team != batting_team:
            break
        else:
            print("Invalid team or same as batting team. The team you entered is not in the available teams or same as the batting team. Please try again.")

    while True:
        city = input("Enter host city: ")
        if city in cities:
            break
        else:
            print("Invalid city. The city you entered is not in the available cities. Please try again.")

    return batting_team, bowling_team, city

# Get user input

batting_team, bowling_team, city = get_user_input(teams, cities)

# Print the teams and city
print(f"\nBatting team: {batting_team}\nBowling team: {bowling_team}\nHost city: {city}")

# Function to get user input
def get_match_input():
    while True:
        try:
            score_till_now = int(input("Enter score till now: "))
            if score_till_now >= 0:
                break
            else:
                print("Invalid input. Score cannot be negative. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    while True:
        try:
            overs_till_now = float(input("Enter overs completed till now: "))
            if 0 <= overs_till_now <= 20:
                break
            else:
                print("Invalid input. Overs should be between 0 and 20. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    while True:
        try:
            wickets_till_now = int(input("Enter wickets lost till now: "))
            if 0 <= wickets_till_now <= 10:
                break
            else:
                print("Invalid input. Wickets should be between 0 and 10. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    while True:
        try:
            target = int(input("Enter target: "))
            if target >= 0:
                break
            else:
                print("Invalid input. Target cannot be negative. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    return score_till_now, overs_till_now, wickets_till_now, target

# Get match input
score_till_now, overs_till_now, wickets_till_now, target = get_match_input()

# Print the score, overs, wickets and target
print(f"\nScore till now: {score_till_now}\nOvers completed till now: {overs_till_now}\nWickets lost till now: {wickets_till_now}\nTarget: {target}")

# Calculate match statistics
Runs_Left = target - score_till_now
Balls_Left = 120 - (overs_till_now*6)
remaining_wickets = 10 - wickets_till_now
if overs_till_now == 0:
    CRR = 0
else:
    CRR = score_till_now/overs_till_now
if Balls_Left == 0:
    RRR = 0
else:
    RRR = (Runs_Left*6)/Balls_Left

# Create dataframe
input_df = pd.DataFrame({
    'batting_team': [batting_team],
    'bowling_team': [bowling_team],
    'city': [city],
    'Runs_Left': [Runs_Left],
    'Balls_Left': [Balls_Left],
    'wickets': [remaining_wickets],
    'total_runs_x': [target],
    'CRR': [CRR],
    'RRR': [RRR]
})

print(input_df)

result = pipe_XGB.predict(input_df)

win_probability = result[0]

print(f"Probability of {batting_team} winning: {round(win_probability * 100)}%")
print(f"Probability of {bowling_team} winning: {round((1 - win_probability) * 100)}%")

model_name = pipe_XGB.named_steps['model'].__class__.__name__
print(f"\nModel: {model_name}\n")

"""LINEAR REGRESSION

"""

from sklearn.linear_model import LinearRegression

# For Linear Regression
pipe_LR = Pipeline(steps=[
    ('preprocessing', Transformer),  # Preprocessing step
    ('model', LinearRegression())  # Machine learning model
])

# Fit the pipeline to the training data
pipe_LR.fit(X_train, y_train)

# Use the pipeline to make predictions on the test data
y_train_pred = pipe_LR.predict(X_train)
y_test_pred = pipe_LR.predict(X_test)

# Print model scores on the training and test set
train_score = pipe_LR.score(X_train, y_train)
test_score = pipe_LR.score(X_test, y_test)
print(f"Training Score: {train_score * 100}%")
print(f"Test Score: {test_score * 100}%")

# Print R2 scores
print(f"Training R2 Score: {r2_score(y_train, y_train_pred)}")
print(f"Test R2 Score: {r2_score(y_test, y_test_pred)}")

# Calculate and print RMSE for the training set
train_rmse = np.sqrt(mean_squared_error(y_train, y_train_pred))
print(f"Training RMSE: {train_rmse}")

# Calculate and print RMSE for the test set
test_rmse = np.sqrt(mean_squared_error(y_test, y_test_pred))
print(f"Test RMSE: {test_rmse}")

plot_learning_curve(pipe_LR, X_train, y_train, cv=5)
plt.show()

# Function to get user input
def get_user_input(teams, cities):
    print("Available Teams: ", ', '.join(sorted(teams)))
    print("Available Cities: ", ', '.join(sorted(cities)))

    while True:
        batting_team = input("Enter batting team: ")
        if batting_team in teams:
            break
        else:
            print("Invalid team. The team you entered is not in the available teams. Please try again.")

    while True:
        bowling_team = input("Enter bowling team: ")
        if bowling_team in teams and bowling_team != batting_team:
            break
        else:
            print("Invalid team or same as batting team. The team you entered is not in the available teams or same as the batting team. Please try again.")

    while True:
        city = input("Enter host city: ")
        if city in cities:
            break
        else:
            print("Invalid city. The city you entered is not in the available cities. Please try again.")

    return batting_team, bowling_team, city

# Get user input

batting_team, bowling_team, city = get_user_input(teams, cities)

# Print the teams and city
print(f"\nBatting team: {batting_team}\nBowling team: {bowling_team}\nHost city: {city}")

# Function to get user input
def get_match_input():
    while True:
        try:
            score_till_now = int(input("Enter score till now: "))
            if score_till_now >= 0:
                break
            else:
                print("Invalid input. Score cannot be negative. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    while True:
        try:
            overs_till_now = float(input("Enter overs completed till now: "))
            if 0 <= overs_till_now <= 20:
                break
            else:
                print("Invalid input. Overs should be between 0 and 20. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    while True:
        try:
            wickets_till_now = int(input("Enter wickets lost till now: "))
            if 0 <= wickets_till_now <= 10:
                break
            else:
                print("Invalid input. Wickets should be between 0 and 10. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    while True:
        try:
            target = int(input("Enter target: "))
            if target >= 0:
                break
            else:
                print("Invalid input. Target cannot be negative. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    return score_till_now, overs_till_now, wickets_till_now, target

# Get match input
score_till_now, overs_till_now, wickets_till_now, target = get_match_input()

# Print the score, overs, wickets and target
print(f"\nScore till now: {score_till_now}\nOvers completed till now: {overs_till_now}\nWickets lost till now: {wickets_till_now}\nTarget: {target}")

# Calculate match statistics
Runs_Left = target - score_till_now
Balls_Left = 120 - (overs_till_now*6)
remaining_wickets = 10 - wickets_till_now
if overs_till_now == 0:
    CRR = 0
else:
    CRR = score_till_now/overs_till_now
if Balls_Left == 0:
    RRR = 0
else:
    RRR = (Runs_Left*6)/Balls_Left

# Create dataframe
input_df = pd.DataFrame({
    'batting_team': [batting_team],
    'bowling_team': [bowling_team],
    'city': [city],
    'Runs_Left': [Runs_Left],
    'Balls_Left': [Balls_Left],
    'wickets': [remaining_wickets],
    'total_runs_x': [target],
    'CRR': [CRR],
    'RRR': [RRR]
})

print(input_df)

result = pipe_LR.predict(input_df)

# 'pipe' is a trained pipeline
win_probability = result[0]

print(f"Probability of {batting_team} winning: {round(win_probability * 100)}%")
print(f"Probability of {bowling_team} winning: {round((1 - win_probability) * 100)}%")

model_name = pipe_LR.named_steps['model'].__class__.__name__
print(f"\nModel: {model_name}\n")

"""SUPPORT VECTOR REGRESSOR
SVR FROM SVM
i gave up on svr because it's training rate is too slow

BEST MODEL PLOT
"""

import matplotlib.pyplot as plt
import matplotlib.cm as cm
import numpy as np


models = {
    "Logistic Regression": 79.75456554612073,
    "Random Forest Regressor": 99.76064753578486,
    "Decision Tree Regressor": 100.0,
    "XGBoost Regressor": 96.22218014309904,
    "Linear Regression": 40.19316922531273
}


model_names = list(models.keys())
accuracy = list(models.values())

# Define colors for each bar (optional)
colors = cm.rainbow(np.linspace(0, 1, len(models)))

plt.figure(figsize=(10, 5))
plt.bar(model_names, accuracy, color=colors)
plt.title('Model Accuracy')
plt.xlabel('Model')
plt.ylabel('Accuracy')
plt.xticks(rotation=45)
plt.show()

